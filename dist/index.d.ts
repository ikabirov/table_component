// Generated by dts-bundle-generator v5.9.0

/// <reference types="prop-types" />
/// <reference types="react" />
/// <reference types="scheduler" />

export declare type TCellType = "text" | "link" | "progress";
export declare type TCellData = {
	span?: number;
	id?: string;
	type?: TCellType;
	styles?: string[];
	value: string | number;
	rowResizeId?: string;
	styleAttribute?: string;
};
export declare type TTableResize = {
	columns: Record<string, number>;
	rows: Record<string, number>;
};
export declare type TMouseEventCallback = ({}: {
	row: number;
	column: number;
	event: MouseEvent;
}) => void;
export declare type TTableCallbacks = {
	onCellClick?: TMouseEventCallback;
	onContextMenu?: TMouseEventCallback;
	onCellMouseOver?: TMouseEventCallback;
	onCellMouseOut?: TMouseEventCallback;
	onCellMouseUp?: TMouseEventCallback;
	onCellMouseDown?: TMouseEventCallback;
	onRowResize?: (id: string, linesCount: number) => void;
	onColumnResize?: (id: string, width: number) => void;
};
export declare type TTableData = {
	values: TCellData[][];
	headRowsCount: number;
	dataHeadColumnsCount: number;
	columnsOrder: string[];
	resize?: TTableResize;
};
export declare type TProps = {
	className?: string;
	table: TTableData;
	minCellHeight?: number;
	mergeCells?: boolean;
	stickyHeader?: boolean;
	stickySide?: boolean;
	cellClasses?: {
		[key: string]: string | undefined;
	};
	resize?: TTableResize;
	callbacks?: TTableCallbacks;
	defaultLinesCount?: number;
	showCollapseIcons?: boolean;
};
export declare const ReactTable: React.FC<TProps>;

export {};
